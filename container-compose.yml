version: "3"

services:
  # minio:
  #   image: docker.io/bitnami/minio:latest
  #   hostname: minio
  #   ports:
  #     - "9000:9000"
  #     - "9001:9001"
  #   environment:
  #     MINIO_ROOT_USER: minioroot
  #     MINIO_ROOT_PASSWORD: minioroot
  #     MINIO_DEFAULT_BUCKETS: archivedrecordings
  #   volumes:
  #     - minio_data:/data
  #     - minio_certs:/certs
  minio:
    image: docker.io/minio/minio:latest
    hostname: minio
    ports:
      - "9001:9001"
      - "9000:9000"
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioroot
      MINIO_ROOT_PASSWORD: minioroot
    volumes:
      - minio_data:/data
      - minio_certs:/certs
    labels:
      kompose.service.expose: "minio"
  db:
    image: quay.io/cryostat/cryostat3-db:latest
    build: ./db
    command: -c encrypt.key=${PG_ENCRYPT_KEY:-REPLACEME}
    hostname: db
    expose:
      - "5432"
    environment:
      POSTGRES_USER: cryostat3
      POSTGRES_PASSWORD: cryostat3
    volumes:
      - postgresql:/var/lib/postgresql/data
  cryostat:
    depends_on:
      - db
      - minio
    image: quay.io/cryostat/cryostat3:latest
    expose:
      - "9091"
    ports:
      - "8181:8181"
    labels:
      kompose.service.expose: "cryostat"
    environment:
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: drop-and-create
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      QUARKUS_DATASOURCE_USERNAME: cryostat3
      QUARKUS_DATASOURCE_PASSWORD: cryostat3
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://db:5432/cryostat3
      QUARKUS_MINIO_URL: http://minio:9000
        # create access key in minio console by visiting http://localhost:9001
        # `podman-compose up minio` may be useful to start minio first to create
        # these secrets, then `export MINIO_ACCESS=abcd ; export MINIO_SECRET=1234 ; podman-compose up`
      QUARKUS_MINIO_ACCESS_KEY: ${MINIO_ACCESS:-REPLACEME}
      QUARKUS_MINIO_SECRET_KEY: ${MINIO_SECRET:-REPLACEME}
      CRYOSTAT_JDP_ENABLED: "true"
      JAVA_OPTS_APPEND: "-XX:+FlightRecorder -XX:StartFlightRecording=name=onstart,settings=default,disk=true,maxage=5m -Dcom.sun.management.jmxremote.autodiscovery=true -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9091 -Dcom.sun.management.jmxremote.rmi.port=9091 -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false"
  sample-app:
    image: quay.io/andrewazores/vertx-fib-demo:0.9.1
    environment:
      HTTP_PORT: 8081
      JMX_PORT: 9093
    ports:
      - "8081:8081"

volumes:
  minio_data:
    driver: local
  minio_certs:
    driver: local
  postgresql:
    driver: local
