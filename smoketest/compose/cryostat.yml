version: "3"
services:
  cryostat:
    depends_on:
      - db
      - s3
    image: quay.io/cryostat/cryostat3:dev
    hostname: cryostat3
    expose:
      - "9091"
    ports:
      - "8181:8181"
    labels:
      kompose.service.expose: "cryostat"
    environment:
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: drop-and-create
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      QUARKUS_DATASOURCE_USERNAME: cryostat3
      QUARKUS_DATASOURCE_PASSWORD: cryostat3
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://db:5432/cryostat3
      STORAGE_BUCKETS_ARCHIVES_NAME: archivedrecordings
      QUARKUS_S3_ENDPOINT_OVERRIDE: http://s3:9000
      QUARKUS_S3_PATH_STYLE_ACCESS: "true" # needed for Minio, but if the specific S3 impl supports DNS subdomain style access then that should be preferred
      QUARKUS_S3_AWS_REGION: us-east-1
      QUARKUS_S3_AWS_CREDENTIALS_TYPE: default
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-minioroot}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-minioroot}
      CRYOSTAT_JDP_ENABLED: "true"
      JAVA_OPTS_APPEND: "-XX:+FlightRecorder -XX:StartFlightRecording=name=onstart,settings=default,disk=true,maxage=5m -Dcom.sun.management.jmxremote.autodiscovery=true -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9091 -Dcom.sun.management.jmxremote.rmi.port=9091 -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false"
    restart: unless-stopped
    healthcheck:
      test: curl --fail http://localhost:8181/health/liveness || exit 1
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 5s

