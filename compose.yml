version: "3"

services:
  # s3:
  #   image: docker.io/localstack/localstack:1.4.0
  #   hostname: s3
  #   ports:
  #     - "4566:4566"
  #     - "4577:4577"
  #   environment:
  #     SERVICES: s3
  #     START_WEB: 1
  #     AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-aws_access_key_id}
  #     AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-aws_secret_access_key}
  #     DEFAULT_REGION: us-east-1
  #     PORT_WEB_UI: 4577
  #   volumes:
  #     - ./aws:/etc/localstack/init/ready.d:z
  #     # this buckets.sh hook script isn't working for some reason. In the meantime, after spinning up the localstack instance, do:
  #     # $ podman exec -it cryostat3_s3_1 /bin/bash
  #     # $ awslocal s3 mb s3://archivedrecordings
  #   labels:
  #     kompose.service.expose: "s3"
  #   restart: unless-stopped
  #   healthcheck:
  #     test: curl --fail http://localhost:4566 || exit 1
  #     interval: 10s
  #     retries: 3
  #     start_period: 10s
  #     timeout: 5s
  #

  s3:
    image: docker.io/minio/minio:latest
    hostname: minio
    ports:
      - "9001:9001"
      - "9000:9000"
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioroot}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY:-minioroot}
      MINIO_DEFAULT_BUCKETS: archivedrecordings
    volumes:
      - minio_data:/data
      - minio_certs:/certs
    labels:
      kompose.service.expose: "minio"
    restart: unless-stopped
    healthcheck:
      test: curl --fail http://localhost:9001 || exit 1
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 5s
  db:
    image: quay.io/cryostat/cryostat3-db:dev
    build: ./db
    entrypoint:
      - /usr/local/bin/docker-entrypoint.sh
    command:
      - postgres
      - -c
      - encrypt.key=${PG_ENCRYPT_KEY:-REPLACEME}
    hostname: db
    expose:
      - "5432"
    environment:
      POSTGRES_USER: cryostat3
      POSTGRES_PASSWORD: cryostat3
    volumes:
      - postgresql:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U cryostat3 -d cryostat3 || exit 1
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 5s
  db-viewer:
    depends_on:
      - db
    image: docker.io/dpage/pgadmin4:6
    hostname: db-viewer
    ports:
      - "8989:8989"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@cryostat.io
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_LISTEN_PORT: 8989
    volumes:
      - pgadmin:/var/lib/pgadmin
      - ./smoketest/compose/servers.json:/pgadmin4/servers.json:z
      # - ./smoketest/compose/pgpass:/pgpass:z
    restart: unless-stopped
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8989 || exit 1
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 5s
  cryostat:
    depends_on:
      - db
      - s3
    image: quay.io/cryostat/cryostat3:dev
    hostname: cryostat3
    expose:
      - "9091"
    ports:
      - "8181:8181"
    labels:
      kompose.service.expose: "cryostat"
    environment:
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: drop-and-create
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      QUARKUS_DATASOURCE_USERNAME: cryostat3
      QUARKUS_DATASOURCE_PASSWORD: cryostat3
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://db:5432/cryostat3
      STORAGE_BUCKETS_ARCHIVES_NAME: archivedrecordings
      QUARKUS_S3_ENDPOINT_OVERRIDE: http://s3:9000
      QUARKUS_S3_PATH_STYLE_ACCESS: "true" # needed for Minio, but if the specific S3 impl supports DNS subdomain style access then that should be preferred
      QUARKUS_S3_AWS_REGION: us-east-1
      QUARKUS_S3_AWS_CREDENTIALS_TYPE: default
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-minioroot}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-minioroot}
      CRYOSTAT_JDP_ENABLED: "true"
      JAVA_OPTS_APPEND: "-XX:+FlightRecorder -XX:StartFlightRecording=name=onstart,settings=default,disk=true,maxage=5m -Dcom.sun.management.jmxremote.autodiscovery=true -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9091 -Dcom.sun.management.jmxremote.rmi.port=9091 -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false"
    restart: unless-stopped
    healthcheck:
      test: curl --fail http://localhost:8181/health/liveness || exit 1
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 5s
  sample-app:
    image: quay.io/andrewazores/vertx-fib-demo:0.12.3
    environment:
      HTTP_PORT: 8081
      JMX_PORT: 9093
      CRYOSTAT_AGENT_APP_NAME: "vertx-fib-demo-1"
      CRYOSTAT_AGENT_WEBCLIENT_SSL_TRUST_ALL: "true"
      CRYOSTAT_AGENT_WEBCLIENT_SSL_VERIFY_HOSTNAME: "false"
      CRYOSTAT_AGENT_WEBSERVER_HOST: "sample-app"
      CRYOSTAT_AGENT_WEBSERVER_PORT: "8910"
      CRYOSTAT_AGENT_CALLBACK: "http://sample-app:8910/"
      CRYOSTAT_AGENT_BASEURI: "http://cryostat:8181/"
      CRYOSTAT_AGENT_TRUST_ALL: "true"
      CRYOSTAT_AGENT_AUTHORIZATION: "Basic dXNlcjpwYXNz"
    ports:
      - "8081:8081"
    restart: unless-stopped
    healthcheck:
      test: curl --fail http://localhost:8081 || exit 1
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 5s
  quarkus-test-agent:
    image: quay.io/andrewazores/quarkus-test:0.0.11
    hostname: quarkus-test-agent
    ports:
      - "9977:9977"
      - "10010:10010"
    environment:
      JAVA_OPTS: "-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager -javaagent:/deployments/app/cryostat-agent.jar"
      QUARKUS_HTTP_PORT: 10010
      ORG_ACME_CRYOSTATSERVICE_ENABLED: "false"
      CRYOSTAT_AGENT_APP_NAME: quarkus-test-agent
      CRYOSTAT_AGENT_WEBSERVER_HOST: quarkus-test-agent
      CRYOSTAT_AGENT_WEBSERVER_PORT: 9977
      CRYOSTAT_AGENT_CALLBACK: http://quarkus-test-agent:9977/
      CRYOSTAT_AGENT_BASEURI: http://cryostat:8181/
      CRYOSTAT_AGENT_SSL_TRUST_ALL: "true"
      CRYOSTAT_AGENT_SSL_VERIFY_HOSTNAME: "false"
      CRYOSTAT_AGENT_AUTHORIZATION: Basic dXNlcjpwYXNz # "Basic $(echo -n user:pass | base64)"
      CRYOSTAT_AGENT_HARVESTER_PERIOD_MS: 30000
      CRYOSTAT_AGENT_HARVESTER_MAX_FILES: 3
      CRYOSTAT_AGENT_HARVESTER_EXIT_MAX_AGE_MS: 60000
      CRYOSTAT_AGENT_HARVESTER_EXIT_MAX_SIZE_B: 153600 # "$(echo 1024*150 | bc)"
    restart: unless-stopped
    healthcheck:
      test: curl --fail http://localhost:10010 || exit 1
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 5s

volumes:
  minio_data:
    driver: local
  minio_certs:
    driver: local
  postgresql:
    driver: local
  pgadmin:
    driver: local
